comment remove

নিচে দেওয়া C প্রোগ্রামটির প্রতিটি লাইন বাংলায় ব্যাখ্যা করা হলো:

c
Copy
Edit
#include <stdio.h>
→ Standard Input/Output লাইব্রেরি ইনক্লুড করা হয়েছে যাতে printf, fopen, fgetc, fputc ইত্যাদি ফাংশন ব্যবহার করা যায়।

c
Copy
Edit
int main()
→ প্রোগ্রামের মূল ফাংশন main() শুরু হচ্ছে।

c
Copy
Edit
FILE *input_file, *output_file;
→ দুইটি ফাইল পয়েন্টার ঘোষণা করা হয়েছে – একটি ইনপুট ফাইল পড়ার জন্য (input_file), আরেকটি আউটপুট ফাইলে লেখার জন্য (output_file)।

c
Copy
Edit
char ch, next_ch;
→ দুইটি চরিত্র ধরার জন্য ভেরিয়েবল – ch বর্তমান অক্ষর, next_ch পরবর্তী অক্ষর।

c
Copy
Edit
int inside_single_line_comment = 0;
int inside_multi_line_comment = 0;
→ একটি single-line (//) কমেন্টে আছি কিনা সেটা ট্র্যাক করার জন্য প্রথম ভেরিয়েবল এবং multi-line (/* ... */) কমেন্টে আছি কিনা সেটা বোঝার জন্য দ্বিতীয় ভেরিয়েবল।

c
Copy
Edit
input_file = fopen("input.c", "r");
→ input.c নামের ফাইলটি রিড (read) মোডে ওপেন করা হচ্ছে।

c
Copy
Edit
if (input_file == NULL)
→ যদি ফাইলটি না খোলা যায় (null হয়), তাহলে...

c
Copy
Edit
{
    printf("Could not open the input file.\n");
    return 1;
}
→ একটি বার্তা প্রিন্ট করবে এবং প্রোগ্রাম বন্ধ করে দিবে (error code 1)।

c
Copy
Edit
output_file = fopen("output.txt", "w");
→ output.txt নামে একটি ফাইল লেখার (write) মোডে খোলা হচ্ছে।

c
Copy
Edit
if (output_file == NULL)
→ যদি আউটপুট ফাইল না খোলা যায়...

c
Copy
Edit
{
    printf("Could not open the output file.\n");
    fclose(input_file);
    return 1;
}
→ বার্তা দিবে, ইনপুট ফাইল বন্ধ করবে, এবং প্রোগ্রাম বন্ধ করে দিবে।

প্রধান লুপ শুরু:
c
Copy
Edit
while ((ch = fgetc(input_file)) != EOF)
→ ইনপুট ফাইল থেকে একটি করে অক্ষর নিয়ে যতক্ষণ না ফাইলের শেষ (EOF) হয় ততক্ষণ লুপ চলবে।

c
Copy
Edit
if (ch == '/' && !inside_multi_line_comment)
→ যদি বর্তমান অক্ষর / হয় এবং আমরা multi-line কমেন্টে না থাকি, তাহলে...

c
Copy
Edit
{
    next_ch = fgetc(input_file);
→ পরবর্তী অক্ষর নেওয়া হচ্ছে।

c
Copy
Edit
    if (next_ch == '/')
    {
        inside_single_line_comment = 1;
    }
→ যদি // পাওয়া যায়, তাহলে single-line কমেন্ট শুরু হয়েছে – সেটা বোঝাতে inside_single_line_comment কে 1 করা হয়েছে।

c
Copy
Edit
    else if (next_ch == '*')
    {
        inside_multi_line_comment = 1;
    }
→ যদি /* পাওয়া যায়, তাহলে multi-line কমেন্ট শুরু হয়েছে – সেটার জন্য ফ্ল্যাগ 1 করা হয়েছে।

c
Copy
Edit
    else
    {
        fputc(ch, output_file);
        fputc(next_ch, output_file);
    }
}
→ যদি / এর পরে * বা / না থাকে, তাহলে এই দুই অক্ষর সাধারণ অক্ষর হিসেবে আউটপুট ফাইলে লেখা হচ্ছে।

c
Copy
Edit
else if (inside_single_line_comment)
→ যদি আমরা single-line কমেন্টে থাকি...

c
Copy
Edit
{
    if (ch == '\n')
    {
        inside_single_line_comment = 0;
        fputc(ch, output_file);
    }
}
→ যদি নতুন লাইন পাওয়া যায়, তাহলে কমেন্ট শেষ – ফ্ল্যাগ 0 করা হচ্ছে এবং নতুন লাইনটি ফাইলে লেখা হচ্ছে।

c
Copy
Edit
else if (inside_multi_line_comment)
→ যদি multi-line কমেন্টে থাকি...

c
Copy
Edit
{
    if (ch == '*' && (next_ch = fgetc(input_file)) == '/')
    {
        inside_multi_line_comment = 0;
    }
}
→ যদি */ পাওয়া যায়, তাহলে multi-line কমেন্ট শেষ – ফ্ল্যাগ 0 করা হচ্ছে।

c
Copy
Edit
else
{
    fputc(ch, output_file);
}
→ উপরের কোন অবস্থায় না পড়লে, অর্থাৎ সাধারণ অক্ষর হলে সেটা আউটপুট ফাইলে লেখা হচ্ছে।

c
Copy
Edit
printf("Comments removed successfully.\n");
→ কমেন্টগুলো সফলভাবে সরানো হয়েছে – এই বার্তাটি দেখানো হচ্ছে।

c
Copy
Edit
fclose(input_file);
fclose(output_file);
→ ইনপুট এবং আউটপুট ফাইল বন্ধ করা হচ্ছে।

c
Copy
Edit
return 0;
→ প্রোগ্রাম সফলভাবে শেষ হয়েছে।











keyword find

#include <stdio.h>
#include <string.h>
#include <ctype.h>
→ প্রয়োজনীয় লাইব্রেরিগুলো ইনক্লুড করা হয়েছে:

stdio.h – ফাইল অপারেশনের জন্য

string.h – স্ট্রিং কম্পার করার জন্য (strcmp)

ctype.h – অক্ষর যাচাইয়ের জন্য (isalpha, isalnum ইত্যাদি)

c
Copy
Edit
int main() {
→ main() ফাংশন থেকে প্রোগ্রামের কার্যক্রম শুরু হচ্ছে।

c
Copy
Edit
FILE *in = fopen("input.c", "r");
→ input.c নামের ফাইলটি রিড (read) মোডে খোলা হচ্ছে।

c
Copy
Edit
if (in == NULL) {
    printf("Failed to open input file.\n");
    return 1;
}
→ যদি ইনপুট ফাইল খোলা না যায়, তাহলে একটি বার্তা দেখিয়ে প্রোগ্রাম বন্ধ করে দেয়া হয়।

c
Copy
Edit
FILE *out = fopen("keywords.txt", "w");  // আউটপুট ফাইল
→ keywords.txt নামের একটি নতুন ফাইল লেখা (write) মোডে খোলা হচ্ছে, যেখানে পাওয়া কিওয়ার্ডগুলো সংরক্ষণ করা হবে।

c
Copy
Edit
if (out == NULL) {
    printf("Failed to open output file.\n");
    fclose(in);
    return 1;
}
→ যদি আউটপুট ফাইল খোলা না যায়, ইনপুট ফাইল বন্ধ করে, প্রোগ্রাম বন্ধ করা হয়।

c
Copy
Edit
const char *keywords[] = {
    "auto","break","case","char","const","continue","default","do",
    "double","else","enum","extern","float","for","goto","if",
    "int","long","register","return","short","signed","sizeof","static",
    "struct","switch","typedef","union","unsigned","void","volatile","while"
};
→ এখানে C প্রোগ্রামিং ভাষার মোট ৩২টি কিওয়ার্ড একটি অ্যারে keywords[] তে সংরক্ষণ করা হয়েছে।

c
Copy
Edit
int keyword_count = 32;
→ কিওয়ার্ড গুলোর মোট সংখ্যা রাখা হয়েছে keyword_count এ।

c
Copy
Edit
char ch, word[100];
int i = 0;
→

ch দিয়ে একেকটি অক্ষর পড়া হবে,

word[] তে সম্ভাব্য কিওয়ার্ড/শব্দ রাখা হবে,

i হচ্ছে ইনডেক্স কাউন্টার।

মূল লুপ শুরু:
c
Copy
Edit
while ((ch = fgetc(in)) != EOF) {
→ ইনপুট ফাইল থেকে একেকটি অক্ষর পড়া হবে যতক্ষণ না ফাইলের শেষ (EOF) পাওয়া যায়।

c
Copy
Edit
if (isalpha(ch) || ch == '_') {
→ যদি বর্তমান অক্ষর একটি letter (A-Z/a-z) অথবা underscore _ হয়, তাহলে এটি একটি সম্ভাব্য identifier (বা কিওয়ার্ড) হতে পারে।

c
Copy
Edit
word[i++] = ch;
→ অক্ষরটি word[] অ্যারেতে রাখা হচ্ছে।

c
Copy
Edit
while ((ch = fgetc(in)) != EOF && (isalnum(ch) || ch == '_')) {
    word[i++] = ch;
}
→ যতক্ষণ পর্যন্ত অক্ষরটি letter, digit অথবা underscore থাকবে, word[] এ যুক্ত করা হচ্ছে। (এভাবে পুরো শব্দটি বানানো হয়)

c
Copy
Edit
word[i] = '\0';
i = 0;
→ word[] স্ট্রিং শেষ করা হচ্ছে \0 দিয়ে এবং কাউন্টার i আবার ০ তে রিসেট করা হচ্ছে।

c
Copy
Edit
int found = 0;
for (int k = 0; k < keyword_count; k++) {
    if (strcmp(word, keywords[k]) == 0) {
        found = 1;
        break;
    }
}
→ word[] এর মানটি keywords[] এর সবগুলোর সাথে তুলনা করে দেখা হচ্ছে – যদি মিলে যায়, তাহলে found = 1 সেট করা হচ্ছে।

c
Copy
Edit
if (found == 1) {
    fprintf(out, "Keyword found: %s\n", word);
}
→ যদি word একটি কিওয়ার্ড হয়, তাহলে সেটি keywords.txt ফাইলে লেখা হচ্ছে।

c
Copy
Edit
if (ch == EOF) break;
→ যদি ch শেষ অক্ষর হয় (EOF), তাহলে লুপ থেকে বের হওয়া হচ্ছে।

ফাইল বন্ধ:
c
Copy
Edit
fclose(in);
fclose(out);
return 0;
→ ইনপুট ও আউটপুট ফাইল বন্ধ করে প্রোগ্রাম সফলভাবে শেষ করা হচ্ছে।








variable length fixed

#include <stdio.h>
#include <ctype.h>
#include <string.h>
→ এই লাইব্রেরিগুলো ইনক্লুড করা হয়েছে:

stdio.h → ফাইল পড়া/লেখার জন্য

ctype.h → অক্ষর চেক করার জন্য (যেমন: isalpha, isalnum)

string.h → (যদিও এই প্রোগ্রামে ব্যবহার হয়নি) স্ট্রিং ফাংশনের জন্য

c
Copy
Edit
int main() {
→ main() ফাংশন থেকে প্রোগ্রামের কাজ শুরু হচ্ছে।

c
Copy
Edit
FILE *in = fopen("input.c", "r");
FILE *out = fopen("output.txt", "w");
→ input.c নামের ফাইল রিড মোডে খোলা হচ্ছে এবং output.txt লেখার জন্য খোলা হচ্ছে।

c
Copy
Edit
char ch, word[100];
int i = 0;
→

ch = প্রতিটি অক্ষর রাখার জন্য

word[] = একটি identifier বা keyword ধরার জন্য

i = word[] এর ইনডেক্স হিসেব রাখে

মূল লুপ শুরু:
c
Copy
Edit
while ((ch = fgetc(in)) != EOF) {
→ ইনপুট ফাইল থেকে প্রতিটি অক্ষর পড়া হচ্ছে যতক্ষণ না ফাইলের শেষ (EOF) পাওয়া যায়।

c
Copy
Edit
if (isalpha(ch)) {
→ যদি অক্ষরটি একটি letter হয় (A-Z/a-z), তাহলে এটি একটি identifier এর শুরু হতে পারে।

c
Copy
Edit
word[i++] = ch;
→ অক্ষরটি word[] অ্যারেতে সংরক্ষণ করা হচ্ছে।

c
Copy
Edit
while ((ch = fgetc(in)) != EOF && (isalnum(ch) || ch == '_'))
    word[i++] = ch;
→ যতক্ষণ পর্যন্ত অক্ষরটি letter, digit বা underscore থাকে, ততক্ষণ পর্যন্ত পুরো শব্দটি বানানো হচ্ছে।

c
Copy
Edit
word[i] = '\0';
→ word[] স্ট্রিংটি শেষ করা হচ্ছে \0 দিয়ে।

c
Copy
Edit
for (int j = 0; j < 5 && word[j] != '\0'; j++) {
    fputc(word[j], out);
}
→ word[] এর প্রথম ৫টি অক্ষর (যদি থাকে) output.txt ফাইলে লেখা হচ্ছে।

c
Copy
Edit
if (ch != EOF)
    fputc(ch, out);
→ যে অক্ষরটি identifier কে থামিয়েছে (যেমন (, ;, স্পেস ইত্যাদি), সেটিও ফাইলে লেখা হচ্ছে যেন কোডের গঠন ঠিক থাকে।

c
Copy
Edit
i = 0; // আবার index reset
→ পরবর্তী শব্দের জন্য ইনডেক্স আবার ০ করা হচ্ছে।

c
Copy
Edit
} else {
    fputc(ch, out); // বাকিগুলো সরাসরি কপি
}
→ যদি কোনো letter না হয় (অর্থাৎ identifier না), তাহলে অক্ষরটি হুবহু কপি করে দেয়া হচ্ছে আউটপুট ফাইলে।

সবশেষে:
c
Copy
Edit
fclose(in);
fclose(out);
printf("Done! Check output.c\n");
return 0;
→

ফাইলগুলো বন্ধ করা হচ্ছে

এবং "Done!" বার্তা প্রিন্ট করা হচ্ছে।






operator find

#include <stdio.h>
🔹 stdio.h লাইব্রেরি ফাইল ইনক্লুড করা হয়েছে, যাতে ফাইল ওপেন/রিড/রাইট ফাংশনগুলো ব্যবহার করা যায়।

c
Copy
Edit
int main() {
🔹 প্রোগ্রামের মেইন ফাংশন শুরু।

c
Copy
Edit
FILE *in = fopen("input.c", "r");
FILE *out = fopen("operators.txt", "w");
🔹 input.c নামের ফাইলটি রিড মোডে খুলছে (in)
🔹 operators.txt ফাইলটি লেখার জন্য খুলছে (out) — যদি না থাকে তাহলে নতুন করে তৈরি হবে।

c
Copy
Edit
if (!in || !out) {
    printf("File open korte parini.\n");
    return 1;
}
🔹 যদি ফাইল ওপেন করতে ব্যর্থ হয়, তাহলে এরর মেসেজ দেখাবে এবং প্রোগ্রাম থেমে যাবে।

c
Copy
Edit
char ch;
🔹 প্রতিটি অক্ষর একে একে রাখার জন্য একটি ক্যারেক্টার ভ্যারিয়েবল ch ডিক্লেয়ার করা হয়েছে।

c
Copy
Edit
while ((ch = fgetc(in)) != EOF) {
🔹 যতক্ষণ পর্যন্ত ইনপুট ফাইলের শেষ না পাওয়া যায়, ততক্ষণ পর্যন্ত একে একে অক্ষর পড়া হবে।

c
Copy
Edit
if (ch == '+' || ch == '-' || ch == '*' || ch == '/' ||
    ch == '%' || ch == '=' || ch == '<' || ch == '>' ||
    ch == '&' || ch == '|' || ch == '!' || ch == '^' ||
    ch == '~' || ch == '?' || ch == ':' || ch == '.') {
🔹 যদি ch এর মান কোনো operator symbol হয় (যেমন +, -, =, &&, ||, !, *, ইত্যাদি), তাহলে নিচের কাজগুলো করা হবে।

⚠️ এখানে শুধুমাত্র সিঙ্গেল ক্যারেক্টার অপারেটরগুলো ধরা হয়েছে। ডাবল অপারেটর (যেমন ==, >=, &&, ||) আলাদা করে চেক করা হয়নি।

c
Copy
Edit
fputc(ch, out);      // operator character ফাইলে লিখবে
fputc('\n', out);    // newline দিবে যেন আলাদা করে পড়া যায়
🔹 অপারেটর চিহ্নটি operators.txt ফাইলে লেখা হচ্ছে
🔹 প্রতিটি চিহ্নের পরে একটি নিউ লাইন দেয়া হচ্ছে যেন প্রতিটি লাইনে একটি করে অপারেটর থাকে।

c
Copy
Edit
}
🔹 if কন্ডিশনের সমাপ্তি।

c
Copy
Edit
fclose(in);
fclose(out);
🔹 ইনপুট ও আউটপুট ফাইল দুটি বন্ধ করে দিচ্ছে।














white space remove

#include <stdio.h>
#include <ctype.h>
🔹 stdio.h → ইনপুট ও আউটপুট ফাংশনের জন্য (যেমন fopen, fgetc, fputc)
🔹 ctype.h → ক্যারেক্টার চেক করার জন্য, এখানে isspace() ফাংশন ব্যবহৃত হয়েছে।

c
Copy
Edit
int main() {
🔹 প্রোগ্রামের মূল ফাংশন শুরু।

c
Copy
Edit
FILE *inputFile, *outputFile;
char ch;
🔹 inputFile ও outputFile → ফাইল পয়েন্টার
🔹 ch → একে একে ইনপুট ফাইলের প্রতিটি ক্যারেক্টার ধরে রাখবে।

c
Copy
Edit
inputFile = fopen("input.c", "r");     // Input C code file
outputFile = fopen("output.txt", "w"); // Output without whitespace
🔹 input.c ফাইলটি রিড মোডে খোলা হচ্ছে
🔹 output.txt ফাইলটি লেখা মোডে খোলা হচ্ছে — যদি না থাকে, নতুনভাবে তৈরি হবে।

c
Copy
Edit
if (inputFile == NULL || outputFile == NULL) {
    printf("File could not be opened!\n");
    return 1;
}
🔹 যদি কোনো ফাইল খুলতে না পারে, তাহলে এরর বার্তা দেখায় এবং প্রোগ্রাম থেমে যায়।

মূল লুপ:
c
Copy
Edit
while ((ch = fgetc(inputFile)) != EOF) {
    if (!isspace(ch)) {
        fputc(ch, outputFile);
    }
}
🔹 ফাইল থেকে যতক্ষণ না EOF (End of File) পাওয়া যাচ্ছে, ততক্ষণ একে একে প্রতিটি ক্যারেক্টার পড়া হচ্ছে।
🔹 isspace(ch) → চেক করে ক্যারেক্টারটি whitespace কিনা (' ', '\t', '\n', '\r', ইত্যাদি)।
🔹 যদি whitespace না হয়, তাহলে তা output.txt ফাইলে লেখা হয়।

c
Copy
Edit
printf("Whitespace removed. Output written to 'output.txt'.\n");
🔹 সফলভাবে প্রক্রিয়াকরণের বার্তা প্রদর্শন করে।

c
Copy
Edit
fclose(inputFile);
fclose(outputFile);
🔹 ফাইল দুইটি বন্ধ করে।








digit find

#include <stdio.h>
#include <ctype.h>
🔹 stdio.h → ফাইল ইনপুট/আউটপুট ফাংশনের জন্য।
🔹 ctype.h → ক্যারেক্টার চেক করার ফাংশনের জন্য (isdigit() ব্যবহার করা হয়েছে)।

c
Copy
Edit
int main() {
🔹 প্রোগ্রামের প্রধান ফাংশন শুরু।

c
Copy
Edit
FILE *inputFile, *outputFile;
char ch;
int count = 0;
🔹 inputFile ও outputFile → ইনপুট ও আউটপুট ফাইল হ্যান্ডেল।
🔹 ch → প্রতিটি ক্যারেক্টার ধরে রাখার জন্য।
🔹 count → কতটি digit পাওয়া গেছে, তা গোনার জন্য কাউন্টার।

c
Copy
Edit
inputFile = fopen("input.c", "r");
outputFile = fopen("digit.txt", "w");
🔹 input.c ফাইলটি রিড মোডে খোলা হচ্ছে।
🔹 digit.txt ফাইলটি লিখার মোডে খোলা হচ্ছে — না থাকলে তৈরি হবে।

c
Copy
Edit
if (inputFile == NULL || outputFile == NULL) {
    printf("File could not be opened!\n");
    return 1;
}
🔹 যদি কোনো ফাইল খুলতে ব্যর্থ হয়, তাহলে এরর মেসেজ দেখিয়ে প্রোগ্রাম বন্ধ হয়ে যাবে।

c
Copy
Edit
fprintf(outputFile, "Digits found in the file:\n");
🔹 digit.txt ফাইলে শিরোনাম লিখে দিচ্ছে।

মূল লজিক:
c
Copy
Edit
while ((ch = fgetc(inputFile)) != EOF) {
    if (isdigit(ch)) {
        if (count > 0) {
            fputc(',', outputFile);  // প্রথমটা বাদে বাকিগুলোর আগে কমা
        }
        fputc(ch, outputFile);      // digit ফাইলে লেখা
        count++;                    // digit গোনা
    }
}
🔹 ইনপুট ফাইল থেকে একে একে প্রতিটি ক্যারেক্টার পড়া হচ্ছে যতক্ষণ না EOF হয়।
🔹 isdigit(ch) চেক করে ক্যারেক্টারটি সংখ্যা কিনা (0–9)।
🔹 যদি হয়, তাহলে:

প্রথম digit বাদে তার আগে কমা (,) দেয়া হচ্ছে।

তারপর সেই digit ফাইলে লেখা হচ্ছে।

এবং কাউন্টার বাড়ানো হচ্ছে।

c
Copy
Edit
fprintf(outputFile, "\n\nTotal digits found: %d\n", count);
🔹 শেষে দুই লাইনের ব্যবধান দিয়ে মোট কয়টি digit পাওয়া গেছে তা লেখা হচ্ছে।

c
Copy
Edit
printf("Formatted digit output written to 'digits.txt'.\n");
🔹 স্ক্রিনে একটি সফলতার বার্তা দেখায়।

c
Copy
Edit
fclose(inputFile);
fclose(outputFile);
🔹 উভয় ফাইল বন্ধ করে দেওয়া হচ্ছে।

c
Copy
Edit
return 0;
🔹 প্রোগ্রাম সফলভাবে শেষ।